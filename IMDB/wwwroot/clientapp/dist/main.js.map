{"version":3,"sources":["webpack:///./$_lazy_route_resource lazy namespace object","webpack:///./app/Shared/dataService.ts","webpack:///./app/Shared/movie.ts","webpack:///./app/Shared/person.ts","webpack:///./app/app.component.html","webpack:///./app/app.component.ts","webpack:///./app/app.module.ts","webpack:///./app/movie/add.component.html","webpack:///./app/movie/add.component.ts","webpack:///./app/movie/movieList.component.css","webpack:///./app/movie/movieList.component.html","webpack:///./app/movie/movieList.component.ts","webpack:///./app/person/person.component.html","webpack:///./app/person/person.component.ts","webpack:///./environments/environment.ts","webpack:///./main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","﻿import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { Observable } from \"rxjs\";\r\nimport { Movie } from \"./movie\";\r\nimport { Person } from \"./person\";\r\n\r\n@Injectable()\r\nexport class DataService {\r\n    constructor(private http: HttpClient) {\r\n\r\n    }\r\n    public movies: Movie[] = [];\r\n    public person: Person;\r\n\r\n    loadMovies(): Observable<Movie[]> {\r\n        return this.http.get(\"/api/movie\")\r\n            .pipe(map((data: any[]) => {\r\n                this.movies = data;\r\n                return this.movies;\r\n            }));\r\n    }\r\n\r\n    loadActorDetails(name: string): Observable < Person > {\r\n        return this.http.get(\"/api/actor/\"+name)\r\n            .pipe(map((data: any) => {\r\n                this.person = data;\r\n                return this.person;\r\n            }));\r\n    }\r\n\r\n    addNewMovie(movie: string): Observable<boolean> {\r\n        return this.http.post(\"/api/movie\", movie, { headers: {\r\n                'Content-Type': 'application/json'\r\n            }})\r\n            .pipe(map((data: any) => {\r\n                return data;\r\n            }));\r\n    }\r\n\r\n    loadPerson(person: string): Observable<Person[]> {\r\n        return this.http.get(\"/api/\"+person)\r\n            .pipe(map((data: any) => {\r\n                return data;\r\n            }));\r\n    }\r\n    \r\n}","﻿import { Person } from './person'\r\n\r\nexport class Movie {\r\n    name: string;\r\n    producer:  Person=new Person();\r\n    releaseYear: Date = new Date();\r\n    plot: string;\r\n    poster: string;\r\n    cast: Array<Person> = new Array<Person>();\r\n}\r\n","﻿export class MovieData {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\nexport class Person {\r\n    id: number;\r\n    name: string;\r\n    sex: string;\r\n    dob: Date= new Date();\r\n    bio: string;\r\n    movies: Array<MovieData>=new Array<MovieData>();\r\n}","module.exports = \"\\r\\n        <router-outlet></router-outlet>\\r\\n      \\r\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'imdb-app',\n  templateUrl:'./app.component.html',\n  styles: []\n})\nexport class AppComponent {\n  title = 'IMDB';\n}\n","import { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\nimport { HttpClientModule } from \"@angular/common/http\";\nimport { RouterModule, Routes } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { MovieListComponent } from './movie/movieList.component';\nimport { AddComponent } from './movie/add.component';\nimport { PersonComponent } from './person/person.component';\n\nimport { DataService } from './Shared/dataService';\n\nlet route: Routes = [\n    { path: \"\", component: MovieListComponent },\n    { path: \"add\", component: AddComponent },\n    { path: \"person/:name\", component: PersonComponent },\n    { path: \"person/:producerName\", component: PersonComponent }\n];\n\n@NgModule({\n  declarations: [\n      AppComponent,\n      MovieListComponent,\n      PersonComponent,\n      AddComponent\n  ],\n  imports: [\n      BrowserModule,\n      HttpClientModule,\n      RouterModule.forRoot(route,\n          {\n              useHash: true\n             // enableTracing: true //for debugging of the routes\n          }),\n      FormsModule\n  ],\n    providers: [\n        DataService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-4 col-md-offset-4\\\" >\\r\\n        <form (submit)=\\\"onSubmit()\\\" #form=\\\"ngForm\\\" novalidate>\\r\\n            <div class=\\\"form-group has-error\\\">\\r\\n                <label class=\\\"control-label\\\">Name</label>\\r\\n                <input #name=\\\"ngModel\\\" type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"name\\\" [(ngModel)]=\\\"movie.name\\\" required/>\\r\\n                <div *ngIf=\\\"name.invalid && name.touched\\\" class=\\\"alert alert-danger\\\">Enter movie name.</div>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\"  [class.has-error]=\\\"name.invalid && name.touched\\\">\\r\\n                <label class=\\\"control-label\\\" for=\\\"releaseYear\\\">Release Year</label>\\r\\n                <input type=\\\"date\\\" class=\\\"form-control\\\" name=\\\"releaseYear\\\" [(ngModel)]=\\\"movie.releaseYear\\\" #releaseyear=\\\"ngModel\\\" required/>\\r\\n                <div *ngIf=\\\"releaseyear.invalid && releaseyear.touched\\\" class=\\\"alert alert-danger\\\">Enter release date.</div>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\" [class.has-error]=\\\"plot.invalid && plot.touched\\\">\\r\\n                <label class=\\\"control-label\\\" for=\\\"plot\\\">Plot</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"plot\\\" [(ngModel)]=\\\"movie.plot\\\" #plot=\\\"ngModel\\\" required />\\r\\n                <div *ngIf=\\\"plot.invalid && plot.touched\\\" class=\\\"alert alert-danger\\\">Enter movie plot.</div>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"cast\\\">Cast</label>\\r\\n                <select name=\\\"cast\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"movie.cast\\\" #cast=\\\"ngModel\\\" required>\\r\\n                    <option *ngFor=\\\"let actor of actorList\\\">{{actor?.name}}</option>\\r\\n                    <option>Other</option>\\r\\n                </select>\\r\\n                <div *ngIf=\\\"cast.invalid && cast.touched\\\" class=\\\"alert alert-danger\\\">Enter movie cast.</div>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"producer\\\">Producer</label>\\r\\n                <select name=\\\"producer\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"movie.producer\\\" #producer=\\\"ngModel\\\" required>\\r\\n                    <option *ngFor=\\\"let producer of producerList\\\">{{producer?.name}}</option>\\r\\n                    <option>Other</option>\\r\\n                </select>\\r\\n                <div *ngIf=\\\"producer.invalid && producer.touched\\\" class=\\\"alert alert-danger\\\">Enter movie producer.</div>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <input type=\\\"submit\\\" class=\\\"btn btn-success\\\" value=\\\"Add\\\"/>\\r\\n                <a routerLinl=\\\"/\\\" class=\\\"btn btn-default\\\">Cancel</a>\\r\\n            </div>\\r\\n\\r\\n        </form>\\r\\n    </div>\\r\\n</div>\"","﻿import { Component, OnInit } from '@angular/core';\r\nimport { DataService } from '../Shared/dataService';\r\nimport { Movie } from '../Shared/movie';\r\nimport {Router } from \"@angular/router\";\r\nimport { Person } from \"../Shared/person\";\r\n\r\n@Component({\r\n    selector: 'add-movie',\r\n    templateUrl: 'add.component.html',\r\n    styleUrls:[]\r\n})\r\nexport class AddComponent implements OnInit{\r\n\r\n    movie: Movie = new Movie();\r\n    message: string;\r\n    producerList: Person[] = [];\r\n    actorList: Person[] = [];\r\n    constructor(private data: DataService, private router: Router) { }\r\n\r\n    ngOnInit(): void {\r\n        this.data.loadPerson(\"actor\")\r\n            .subscribe(success=> this.actorList=success);\r\n        this.data.loadPerson(\"producer\")\r\n            .subscribe(success => this.producerList = success);\r\n    }\r\n\r\n    onSubmit() {\r\n        let movieData = this.movie;\r\n\r\n        this.data.addNewMovie(JSON.stringify(movieData))\r\n            .subscribe(success => this.message = \"The movie details has been successfully added.\");\r\n    }\r\n}","module.exports = \".movie-info {\\r\\n    max-height: 550px;\\r\\n}\\r\\n\\r\\n.movie-info .movie-name {\\r\\n    font-size: large;\\r\\n    font-weight: bold;\\r\\n    text-align: center;\\r\\n}\\r\\n\\r\\n.movie-info .cast {\\r\\n    display: inline-block;\\r\\n}\\r\\n\\r\\n.movie-info img {\\r\\n    max-width: 300px;\\r\\n    max-height: 300px;\\r\\n    float: left;\\r\\n    margin: 2px 15px;\\r\\n    border: solid 1px black;\\r\\n}\"","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"movie-info col-md-4 well well-sm\\\" *ngFor=\\\"let m of movies\\\">\\r\\n        <div class=\\\"card bg-light p-1 m-1\\\">\\r\\n            <img src=\\\"https://image.tmdb.org/t/p/w600_and_h900_bestv2{{ m.poster }}\\\" class=\\\"img-responsive\\\" />\\r\\n\\r\\n            <div class=\\\"movie-name\\\">{{m.name}} </div>\\r\\n            <div><strong>Year  </strong>Released in {{m.releaseYear | date:'mediumDate'}}</div>\\r\\n            <div>\\r\\n                <strong>Cast </strong>\\r\\n                <div class=\\\"cast\\\" *ngFor=\\\"let a of m.cast; let lastItem=last;\\\">\\r\\n                    <a [routerLink]=\\\"['/person', a.name ]\\\"> {{a.name}}<span *ngIf=\\\"!lastItem\\\">, </span> </a>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div><strong>Producer  </strong><a [routerLink]=\\\"['/person',m.producer | json ]\\\">{{m.producer.name}}</a></div>\\r\\n            <a routerLink=\\\"actor\\\" id=\\\"\\\" class=\\\"btn btn-success btn-sm pull-right\\\">EDIT Info</a>\\r\\n        </div>\\r\\n    </div>\\r\\n    \\r\\n</div>\"","﻿import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { DataService } from \"../Shared/dataService\";\r\nimport { Movie } from \"../Shared/movie\";\r\n\r\n@Component({\r\n    selector: \"movie-list\",\r\n    templateUrl: \"movieList.component.html\",\r\n    styleUrls: [\"movieList.component.css\"]\r\n})\r\nexport class MovieListComponent implements OnInit{\r\n   @Input() name:string;\r\n    constructor(private data: DataService) {\r\n        this.movies = data.movies;\r\n    }\r\n\r\n    public movies: Movie[] = [];\r\n\r\n    ngOnInit(): void {\r\n        this.data.loadMovies()\r\n            .subscribe(data => {\r\n                    if (data) {\r\n                        this.movies = data;\r\n                    }\r\n                }\r\n            );\r\n    }\r\n}","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"card bg-light p-1 m-1\\\">\\r\\n\\r\\n\\r\\n        <div class=\\\"movie-name\\\">{{person.name}} </div>\\r\\n        <div><strong>Date of Birth  </strong>Released in {{person.dob | date:'mediumDate'}}</div>\\r\\n        <div><strong>Bio  </strong>{{person.bio}}</div>\\r\\n        <div><strong>Gender  </strong>{{person.sex}}</div>\\r\\n        <div *ngFor=\\\"let m of person.movies\\\">\\r\\n            <div>{{m.name}}</div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n</div>\"","﻿import { Component, OnInit } from \"@angular/core\";\r\nimport { DataService } from \"../Shared/dataService\";\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Person } from '../Shared/person';\r\n\r\n@Component({\r\n    selector: \"person-detail\",\r\n    templateUrl: \"person.component.html\",\r\n    styleUrls: []\r\n})\r\nexport class PersonComponent implements OnInit{\r\n\r\n    person: Person = new Person();\r\n    input: any;\r\n    constructor(private data: DataService, private _route: ActivatedRoute,) { }\r\n    \r\n    ngOnInit(): void {\r\n        \r\n        this._route.params.subscribe(params => {\r\n            this.input = params['name'];\r\n        });\r\n        this.input = this.isJSON(this.input);\r\n    }\r\n\r\n    getPerson(name: string) {\r\n        this.data.loadActorDetails(name)\r\n            .subscribe(data=> this.person=data);\r\n    }\r\n\r\n    isJSON(data) {\r\n        try {\r\n            this.person = JSON.parse(data);\r\n        } catch (e) {\r\n            return this.getPerson(data);\r\n        }\r\n    }\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}